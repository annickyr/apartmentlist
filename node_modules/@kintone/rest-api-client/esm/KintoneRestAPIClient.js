var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { BulkRequestClient } from "./client/BulkRequestClient";
import { AppClient } from "./client/AppClient";
import { RecordClient } from "./client/RecordClient";
import { FileClient } from "./client/FileClient";
import { DefaultHttpClient } from "./http/";
import { Base64 } from "js-base64";
import { KintoneRestAPIError } from "./KintoneRestAPIError";
var KintoneRestAPIClient = /** @class */ (function () {
    function KintoneRestAPIClient(options) {
        if (options === void 0) { options = {}; }
        var _a, _b, _c;
        var auth = this.buildAuth((_a = options.auth, (_a !== null && _a !== void 0 ? _a : {})));
        var params = this.buildParams(auth);
        this.headers = this.buildHeaders(auth, options.basicAuth);
        this.baseUrl = (_b = options.baseUrl, (_b !== null && _b !== void 0 ? _b : (_c = location) === null || _c === void 0 ? void 0 : _c.origin));
        if (typeof this.baseUrl === "undefined") {
            throw new Error("in Node environment, baseUrl is required");
        }
        var errorResponseHandler = function (errorResponse) {
            throw new KintoneRestAPIError(errorResponse);
        };
        var httpClient = new DefaultHttpClient({
            baseUrl: this.baseUrl,
            headers: this.headers,
            params: params,
            errorResponseHandler: errorResponseHandler
        });
        var guestSpaceId = options.guestSpaceId;
        this.bulkRequest_ = new BulkRequestClient(httpClient, guestSpaceId);
        this.record = new RecordClient(httpClient, guestSpaceId);
        this.app = new AppClient(httpClient, guestSpaceId);
        this.file = new FileClient(httpClient, guestSpaceId);
    }
    KintoneRestAPIClient.prototype.getBaseUrl = function () {
        return this.baseUrl;
    };
    KintoneRestAPIClient.prototype.getHeaders = function () {
        return this.headers;
    };
    KintoneRestAPIClient.prototype.buildAuth = function (auth) {
        if ("username" in auth) {
            return __assign({ type: "password" }, auth);
        }
        if ("apiToken" in auth) {
            return __assign({ type: "apiToken" }, auth);
        }
        return {
            type: "session"
        };
    };
    KintoneRestAPIClient.prototype.buildHeaders = function (auth, basicAuth) {
        var headers = basicAuth
            ? {
                Authorization: "Basic " + Base64.encode(basicAuth.username + ":" + basicAuth.password)
            }
            : {};
        switch (auth.type) {
            case "password": {
                return __assign(__assign({}, headers), { "X-Cybozu-Authorization": Base64.encode(auth.username + ":" + auth.password) });
            }
            case "apiToken": {
                if (Array.isArray(auth.apiToken)) {
                    return __assign(__assign({}, headers), { "X-Cybozu-API-Token": auth.apiToken.join(",") });
                }
                return __assign(__assign({}, headers), { "X-Cybozu-API-Token": auth.apiToken });
            }
            default: {
                return __assign(__assign({}, headers), { "X-Requested-With": "XMLHttpRequest" });
            }
        }
    };
    KintoneRestAPIClient.prototype.buildParams = function (auth) {
        var requestToken;
        if (auth.type === "session") {
            if (typeof kintone === "undefined" ||
                typeof kintone.getRequestToken !== "function") {
                throw new Error("session authentication must specify a request token");
            }
            requestToken = kintone.getRequestToken();
        }
        // This params are always sent as a request body.
        return requestToken
            ? {
                __REQUEST_TOKEN__: requestToken
            }
            : {};
    };
    KintoneRestAPIClient.prototype.bulkRequest = function (params) {
        return this.bulkRequest_.send(params);
    };
    return KintoneRestAPIClient;
}());
export { KintoneRestAPIClient };
