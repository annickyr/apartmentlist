import { AppID, RecordID, Revision } from "./../KintoneTypes";
import { HttpClient } from "./../http/";
export declare type Record = {
    [fieldCode: string]: any;
};
declare type Mention = {
    code: string;
    type: "USER" | "GROUP" | "ORGANIZATION";
};
declare type Comment = {
    id: string;
    text: string;
    createdAt: string;
    creator: {
        code: string;
        name: string;
    };
    mentions: Mention[];
};
declare type CommentID = string | number;
export declare class RecordClient {
    private client;
    private guestSpaceId?;
    private didWarnMaximumOffsetValue;
    constructor(client: HttpClient, guestSpaceId?: number | string);
    getRecord<T extends Record>(params: {
        app: AppID;
        id: RecordID;
    }): Promise<{
        record: T;
    }>;
    addRecord(params: {
        app: AppID;
        record?: object;
    }): Promise<{
        id: string;
        revision: string;
    }>;
    updateRecord(params: {
        app: AppID;
        id: RecordID;
        record?: object;
        revision?: Revision;
    } | {
        app: AppID;
        updateKey: object;
        record?: object;
        revision?: Revision;
    }): Promise<{
        revision: string;
    }>;
    getRecords<T extends Record>(params: {
        app: AppID;
        fields?: string[];
        query?: string;
        totalCount?: boolean;
    }): Promise<{
        records: T[];
        totalCount: string | null;
    }>;
    addRecords(params: {
        app: AppID;
        records: Record[];
    }): Promise<{
        ids: string[];
        revisions: string[];
    }>;
    updateRecords(params: {
        app: AppID;
        records: Array<{
            id: RecordID;
            record?: object;
            revision?: Revision;
        } | {
            updateKey: object;
            record?: object;
            revision?: Revision;
        }>;
    }): Promise<Array<{
        id: string;
        revision: string;
    }>>;
    deleteRecords(params: {
        app: AppID;
        ids: RecordID[];
        revisions?: Revision[];
    }): Promise<{}>;
    createCursor(params: {
        app: AppID;
        fields?: string[];
        query?: string;
        size?: number | string;
    }): Promise<{
        id: string;
        totalCount: string;
    }>;
    getRecordsByCursor<T extends Record>(params: {
        id: string;
    }): Promise<{
        records: T[];
        next: boolean;
    }>;
    deleteCursor(params: {
        id: string;
    }): Promise<{}>;
    getAllRecords<T extends Record>(params: {
        app: AppID;
        fields?: string[];
        condition?: string;
        orderBy?: string;
        withCursor?: boolean;
    }): Promise<T[]>;
    getAllRecordsWithId<T extends Record>(params: {
        app: AppID;
        fields?: string[];
        condition?: string;
    }): Promise<T[]>;
    private getAllRecordsRecursiveWithId;
    getAllRecordsWithOffset<T extends Record>(params: {
        app: AppID;
        fields?: string[];
        condition?: string;
        orderBy?: string;
    }): Promise<T[]>;
    private getAllRecordsRecursiveWithOffset;
    getAllRecordsWithCursor<T extends Record>(params: {
        app: AppID;
        fields?: string[];
        query?: string;
    }): Promise<T[]>;
    private getAllRecordsRecursiveByCursor;
    addRecordComment(params: {
        app: AppID;
        record: RecordID;
        comment: {
            text: string;
            mentions?: Mention[];
        };
    }): Promise<{
        id: string;
    }>;
    deleteRecordComment(params: {
        app: AppID;
        record: RecordID;
        comment: CommentID;
    }): Promise<{}>;
    getRecordComments(params: {
        app: AppID;
        record: RecordID;
        order?: "asc" | "desc";
        offset?: number;
        limit?: number;
    }): Promise<{
        comments: Comment[];
        older: boolean;
        newer: boolean;
    }>;
    updateRecordAssignees(params: {
        app: AppID;
        id: RecordID;
        assignees: string[];
        revision?: Revision;
    }): Promise<{
        revision: string;
    }>;
    updateRecordStatus(params: {
        action: string;
        app: AppID;
        assignee?: string;
        id: RecordID;
        revision?: Revision;
    }): Promise<{
        revision: string;
    }>;
    updateRecordsStatus(params: {
        app: AppID;
        records: Array<{
            action: string;
            assignee?: string;
            id: RecordID;
            revision?: Revision;
        }>;
    }): Promise<{
        records: Array<{
            id: string;
            revision: string;
        }>;
    }>;
    private buildPathWithGuestSpaceId;
}
export {};
