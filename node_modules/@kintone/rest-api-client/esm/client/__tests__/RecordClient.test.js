var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { RecordClient } from "../RecordClient";
import { MockClient } from "../../http/MockClient";
describe("RecordClient", function () {
    var _a;
    var mockClient;
    var recordClient;
    var APP_ID = 1;
    var RECORD_ID = 2;
    var fieldCode = "Customer";
    var record = (_a = {},
        _a[fieldCode] = {
            value: "ABC Corporation"
        },
        _a);
    beforeEach(function () {
        mockClient = new MockClient();
        recordClient = new RecordClient(mockClient);
    });
    describe("getRecord", function () {
        var params = { app: APP_ID, id: RECORD_ID };
        beforeEach(function () {
            recordClient.getRecord(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/record.json");
        });
        it("should send a get request", function () {
            expect(mockClient.getLogs()[0].method).toBe("get");
        });
        it("should pass app and id to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("addRecord", function () {
        var params = { app: APP_ID, record: record };
        beforeEach(function () {
            recordClient.addRecord(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/record.json");
        });
        it("should send a post request", function () {
            expect(mockClient.getLogs()[0].method).toBe("post");
        });
        it("should pass app and record object to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("updateRecord", function () {
        var params = {
            app: APP_ID,
            id: RECORD_ID,
            record: record,
            revision: 5
        };
        beforeEach(function () {
            recordClient.updateRecord(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/record.json");
        });
        it("should send a put request", function () {
            expect(mockClient.getLogs()[0].method).toBe("put");
        });
        it("should pass app, id, record, and revision to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("getRecords", function () {
        var params = {
            app: APP_ID,
            fields: [fieldCode],
            query: fieldCode + " = \"foo\"",
            totalCount: true
        };
        beforeEach(function () {
            recordClient.getRecords(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/records.json");
        });
        it("should send a get request", function () {
            expect(mockClient.getLogs()[0].method).toBe("get");
        });
        it("should pass app, fields, query and totalCount to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("addRecords", function () {
        var params = { app: APP_ID, records: [record] };
        beforeEach(function () {
            recordClient.addRecords(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/records.json");
        });
        it("should send a post request", function () {
            expect(mockClient.getLogs()[0].method).toBe("post");
        });
        it("should pass app and records to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("updateRecords", function () {
        var params = {
            app: APP_ID,
            records: [{ id: RECORD_ID, record: record, revision: 5 }]
        };
        beforeEach(function () {
            recordClient.updateRecords(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/records.json");
        });
        it("should send a put request", function () {
            expect(mockClient.getLogs()[0].method).toBe("put");
        });
        it("should pass app, id, record, and revision to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("deleteRecords", function () {
        var ids = [10, 20, 30];
        var revisions = [1, 2, 3];
        var params = {
            app: APP_ID,
            ids: ids,
            revisions: revisions
        };
        beforeEach(function () {
            recordClient.deleteRecords(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/records.json");
        });
        it("should send a delete request", function () {
            expect(mockClient.getLogs()[0].method).toBe("delete");
        });
        it("should pass app, ids, and revisions to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("createCursor", function () {
        var params = {
            app: APP_ID,
            fields: [fieldCode],
            query: fieldCode + " = \"foo\"",
            size: 10
        };
        beforeEach(function () {
            recordClient.createCursor(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/records/cursor.json");
        });
        it("should send a post request", function () {
            expect(mockClient.getLogs()[0].method).toBe("post");
        });
        it("should pass app, fields, query, and size to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("getRecordsByCursor", function () {
        var params = {
            id: "cursor id"
        };
        beforeEach(function () {
            recordClient.getRecordsByCursor(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/records/cursor.json");
        });
        it("should send a get request", function () {
            expect(mockClient.getLogs()[0].method).toBe("get");
        });
        it("should pass id to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("deleteCursor", function () {
        var params = {
            id: "cursor id"
        };
        beforeEach(function () {
            recordClient.deleteCursor(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/records/cursor.json");
        });
        it("should send a delete request", function () {
            expect(mockClient.getLogs()[0].method).toBe("delete");
        });
        it("should pass id to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("getAllRecordsWithId", function () {
        describe("success with condition", function () {
            it("should do nothing if `fields` is not specified", function () { return __awaiter(void 0, void 0, void 0, function () {
                var params;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            params = {
                                app: APP_ID,
                                condition: fieldCode + " = \"foo\""
                            };
                            mockClient.mockResponse({ records: [] });
                            return [4 /*yield*/, recordClient.getAllRecordsWithId(params)];
                        case 1:
                            _a.sent();
                            expect(mockClient.getLogs()[0].params.fields).toBe(undefined);
                            return [2 /*return*/];
                    }
                });
            }); });
            it("should do nothing if `fields` is empty", function () { return __awaiter(void 0, void 0, void 0, function () {
                var params;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            params = {
                                app: APP_ID,
                                fields: [],
                                condition: fieldCode + " = \"foo\""
                            };
                            mockClient.mockResponse({ records: [] });
                            return [4 /*yield*/, recordClient.getAllRecordsWithId(params)];
                        case 1:
                            _a.sent();
                            expect(mockClient.getLogs()[0].params.fields).toEqual([]);
                            return [2 /*return*/];
                    }
                });
            }); });
            it("should append `$id` if `fields` is specified and doesn't contain `$id`", function () { return __awaiter(void 0, void 0, void 0, function () {
                var params;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            params = {
                                app: APP_ID,
                                fields: [fieldCode],
                                condition: fieldCode + " = \"foo\""
                            };
                            mockClient.mockResponse({ records: [] });
                            return [4 /*yield*/, recordClient.getAllRecordsWithId(params)];
                        case 1:
                            _a.sent();
                            expect(mockClient.getLogs()[0].params.fields.sort()).toEqual(__spreadArrays(params.fields, ["$id"]).sort());
                            return [2 /*return*/];
                    }
                });
            }); });
            it("should do nothing if `fields` is specified and contains `$id`", function () { return __awaiter(void 0, void 0, void 0, function () {
                var params;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            params = {
                                app: APP_ID,
                                fields: ["$id", fieldCode],
                                condition: fieldCode + " = \"foo\""
                            };
                            mockClient.mockResponse({ records: [] });
                            return [4 /*yield*/, recordClient.getAllRecordsWithId(params)];
                        case 1:
                            _a.sent();
                            expect(mockClient.getLogs()[0].params.fields).toEqual(params.fields);
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        describe("success with condition", function () {
            var params = {
                app: APP_ID,
                fields: ["$id"],
                condition: fieldCode + " = \"foo\""
            };
            var result;
            beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
                var records, i;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            records = [];
                            for (i = 1; i <= 500; i++) {
                                records.push({
                                    $id: {
                                        value: i.toString()
                                    }
                                });
                            }
                            mockClient.mockResponse({ records: records });
                            mockClient.mockResponse({ records: [{ $id: { value: "501" } }] });
                            return [4 /*yield*/, recordClient.getAllRecordsWithId(params)];
                        case 1:
                            result = _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
            it("should return all records", function () {
                expect(mockClient.getLogs()[0]).toEqual({
                    path: "/k/v1/records.json",
                    method: "get",
                    params: {
                        app: params.app,
                        fields: params.fields,
                        query: (params.condition ||
                            "") + " and $id > 0 order by $id asc limit 500"
                    }
                });
                expect(mockClient.getLogs()[1]).toEqual({
                    path: "/k/v1/records.json",
                    method: "get",
                    params: {
                        app: params.app,
                        fields: params.fields,
                        query: (params.condition ||
                            "") + " and $id > 500 order by $id asc limit 500"
                    }
                });
                expect(result.length).toBe(501);
                expect(result[500]).toStrictEqual({ $id: { value: "501" } });
            });
        });
        describe("success without condition", function () {
            var params = {
                app: APP_ID,
                fields: ["$id"]
            };
            var result;
            beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
                var records, i;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            records = [];
                            for (i = 1; i <= 500; i++) {
                                records.push({
                                    $id: {
                                        value: i.toString()
                                    }
                                });
                            }
                            mockClient.mockResponse({ records: records });
                            mockClient.mockResponse({ records: [{ $id: { value: "501" } }] });
                            return [4 /*yield*/, recordClient.getAllRecordsWithId(params)];
                        case 1:
                            result = _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
            it("should return all records", function () {
                expect(mockClient.getLogs()[0]).toEqual({
                    path: "/k/v1/records.json",
                    method: "get",
                    params: {
                        app: params.app,
                        fields: params.fields,
                        query: "$id > 0 order by $id asc limit 500"
                    }
                });
                expect(mockClient.getLogs()[1]).toEqual({
                    path: "/k/v1/records.json",
                    method: "get",
                    params: {
                        app: params.app,
                        fields: params.fields,
                        query: "$id > 500 order by $id asc limit 500"
                    }
                });
                expect(result.length).toBe(501);
                expect(result[500]).toStrictEqual({ $id: { value: "501" } });
            });
        });
    });
    describe("getAllRecordsWithOffset", function () {
        describe("condition and orderBy parameters", function () {
            it("with condition and orderBy", function () { return __awaiter(void 0, void 0, void 0, function () {
                var params;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            params = {
                                app: APP_ID,
                                condition: fieldCode + " = \"foo\"",
                                orderBy: fieldCode + " asc"
                            };
                            mockClient.mockResponse({ records: [] });
                            return [4 /*yield*/, recordClient.getAllRecordsWithOffset(params)];
                        case 1:
                            _a.sent();
                            expect(mockClient.getLogs()[0].params.query).toBe(fieldCode + " = \"foo\" order by " + fieldCode + " asc limit 500 offset 0");
                            return [2 /*return*/];
                    }
                });
            }); });
            it("with condition, without orderBy", function () { return __awaiter(void 0, void 0, void 0, function () {
                var params;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            params = {
                                app: APP_ID,
                                condition: fieldCode + " = \"foo\""
                            };
                            mockClient.mockResponse({ records: [] });
                            return [4 /*yield*/, recordClient.getAllRecordsWithOffset(params)];
                        case 1:
                            _a.sent();
                            expect(mockClient.getLogs()[0].params.query).toBe(fieldCode + " = \"foo\" limit 500 offset 0");
                            return [2 /*return*/];
                    }
                });
            }); });
            it("without condition, with orderBy", function () { return __awaiter(void 0, void 0, void 0, function () {
                var params;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            params = {
                                app: APP_ID,
                                orderBy: fieldCode + " asc"
                            };
                            mockClient.mockResponse({ records: [] });
                            return [4 /*yield*/, recordClient.getAllRecordsWithOffset(params)];
                        case 1:
                            _a.sent();
                            expect(mockClient.getLogs()[0].params.query).toBe("order by " + fieldCode + " asc limit 500 offset 0");
                            return [2 /*return*/];
                    }
                });
            }); });
            it("neither condition nor orderBy", function () { return __awaiter(void 0, void 0, void 0, function () {
                var params;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            params = {
                                app: APP_ID
                            };
                            mockClient.mockResponse({ records: [] });
                            return [4 /*yield*/, recordClient.getAllRecordsWithOffset(params)];
                        case 1:
                            _a.sent();
                            expect(mockClient.getLogs()[0].params.query).toBe("limit 500 offset 0");
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        describe("success", function () {
            var params = {
                app: APP_ID,
                fields: ["$id"],
                condition: fieldCode + " = \"foo\""
            };
            var result;
            beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
                var records, i;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            records = [];
                            for (i = 1; i <= 500; i++) {
                                records.push({
                                    $id: {
                                        value: i.toString()
                                    }
                                });
                            }
                            mockClient.mockResponse({ records: records });
                            mockClient.mockResponse({ records: [{ $id: { value: "501" } }] });
                            return [4 /*yield*/, recordClient.getAllRecordsWithOffset(params)];
                        case 1:
                            result = _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
            it("should return all records", function () {
                expect(mockClient.getLogs()[0]).toEqual({
                    path: "/k/v1/records.json",
                    method: "get",
                    params: {
                        app: params.app,
                        fields: params.fields,
                        query: (params.condition || "") + " limit 500 offset 0"
                    }
                });
                expect(mockClient.getLogs()[1]).toEqual({
                    path: "/k/v1/records.json",
                    method: "get",
                    params: {
                        app: params.app,
                        fields: params.fields,
                        query: (params.condition || "") + " limit 500 offset 500"
                    }
                });
                expect(result.length).toBe(501);
                expect(result[500]).toStrictEqual({ $id: { value: "501" } });
            });
        });
    });
    describe("getAllRecords", function () {
        describe("`orderBy` is specified", function () {
            var params = {
                app: APP_ID,
                condition: fieldCode + " = \"foo\"",
                orderBy: fieldCode + " asc"
            };
            var withCursorMockFn;
            var withOffsetMockFn;
            beforeEach(function () {
                withCursorMockFn = jest.fn();
                withOffsetMockFn = jest.fn();
                recordClient.getAllRecordsWithCursor = withCursorMockFn;
                recordClient.getAllRecordsWithOffset = withOffsetMockFn;
            });
            it("should call `getAllRecordsWithCursor` if `withCursor` is not specified", function () {
                recordClient.getAllRecords(__assign({}, params));
                expect(withCursorMockFn.mock.calls.length).toBe(1);
                expect(withCursorMockFn.mock.calls[0][0]).toStrictEqual({
                    app: params.app,
                    query: params.condition + " order by " + params.orderBy
                });
            });
            it("should call `getAllRecordsWithCursor` if `withCursor` is true", function () {
                recordClient.getAllRecords(__assign(__assign({}, params), { withCursor: true }));
                expect(withCursorMockFn.mock.calls.length).toBe(1);
                expect(withCursorMockFn.mock.calls[0][0]).toStrictEqual({
                    app: params.app,
                    query: params.condition + " order by " + params.orderBy
                });
            });
            it("should call `getAllRecordsWithOffset` if `withCursor` is false", function () {
                recordClient.getAllRecords(__assign(__assign({}, params), { withCursor: false }));
                expect(withOffsetMockFn.mock.calls.length).toBe(1);
                expect(withOffsetMockFn.mock.calls[0][0]).toStrictEqual(params);
            });
        });
        describe("`orderBy` is an empty string", function () {
            var params = {
                app: APP_ID,
                condition: fieldCode + " = \"foo\"",
                orderBy: ""
            };
            var orderBy = params.orderBy, expected = __rest(params, ["orderBy"]);
            var mockFn;
            beforeEach(function () {
                mockFn = jest.fn();
                recordClient.getAllRecordsWithId = mockFn;
            });
            it("should call `getAllRecordsWithId` if `withCursor` is not specified", function () {
                recordClient.getAllRecords(params);
                expect(mockFn.mock.calls.length).toBe(1);
                expect(mockFn.mock.calls[0][0]).toStrictEqual(expected);
            });
            it("should call `getAllRecordsWithId` if `withCursor` is true", function () {
                recordClient.getAllRecords(__assign(__assign({}, params), { withCursor: true }));
                expect(mockFn.mock.calls.length).toBe(1);
                expect(mockFn.mock.calls[0][0]).toStrictEqual(expected);
            });
            it("should call `getAllRecordsWithId` if `withCursor` is false", function () {
                recordClient.getAllRecords(__assign(__assign({}, params), { withCursor: false }));
                expect(mockFn.mock.calls.length).toBe(1);
                expect(mockFn.mock.calls[0][0]).toStrictEqual(expected);
            });
        });
        describe("`orderBy` is not specified", function () {
            var params = {
                app: APP_ID,
                condition: fieldCode + " = \"foo\""
            };
            var mockFn;
            beforeEach(function () {
                mockFn = jest.fn();
                recordClient.getAllRecordsWithId = mockFn;
            });
            it("should call `getAllRecordsWithId` if `withCursor` is not specified", function () {
                recordClient.getAllRecords(params);
                expect(mockFn.mock.calls.length).toBe(1);
                expect(mockFn.mock.calls[0][0]).toStrictEqual(params);
            });
            it("should call `getAllRecordsWithId` if `withCursor` is true", function () {
                recordClient.getAllRecords(__assign(__assign({}, params), { withCursor: true }));
                expect(mockFn.mock.calls.length).toBe(1);
                expect(mockFn.mock.calls[0][0]).toStrictEqual(params);
            });
            it("should call `getAllRecordsWithId` if `withCursor` is false", function () {
                recordClient.getAllRecords(__assign(__assign({}, params), { withCursor: false }));
                expect(mockFn.mock.calls.length).toBe(1);
                expect(mockFn.mock.calls[0][0]).toStrictEqual(params);
            });
        });
    });
    describe("getAllRecordsWithCursor", function () {
        var params = {
            app: APP_ID,
            fields: [fieldCode],
            query: fieldCode + " = \"foo\""
        };
        var CURSOR_ID = "1";
        var result;
        describe("success", function () {
            beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // response from createCursor
                            mockClient.mockResponse({ id: CURSOR_ID, totalCount: "4" });
                            // response from getRecordsByCursor
                            mockClient.mockResponse({
                                records: [{ id: 1 }, { id: 2 }],
                                next: true
                            });
                            mockClient.mockResponse({
                                records: [{ id: 3 }, { id: 4 }],
                                next: false
                            });
                            return [4 /*yield*/, recordClient.getAllRecordsWithCursor(params)];
                        case 1:
                            result = _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
            it("should create a cursor", function () {
                expect(mockClient.getLogs()[0]).toEqual({
                    path: "/k/v1/records/cursor.json",
                    method: "post",
                    params: params
                });
            });
            it("should return all records", function () {
                expect(mockClient.getLogs()[1]).toEqual({
                    path: "/k/v1/records/cursor.json",
                    method: "get",
                    params: { id: CURSOR_ID }
                });
                expect(mockClient.getLogs()[2]).toEqual({
                    path: "/k/v1/records/cursor.json",
                    method: "get",
                    params: { id: CURSOR_ID }
                });
                expect(result).toStrictEqual([
                    { id: 1 },
                    { id: 2 },
                    { id: 3 },
                    { id: 4 }
                ]);
            });
            it("should not call deleteCursor", function () {
                expect(mockClient.getLogs().length).toEqual(3);
            });
        });
        describe("failure", function () {
            beforeEach(function () {
                // response from createCursor
                mockClient.mockResponse({ id: CURSOR_ID, totalCount: "4" });
                // response from getRecordsByCursor
                mockClient.mockResponse({
                    records: [{ id: 1 }, { id: 2 }],
                    next: true
                });
                mockClient.mockResponse(new Error("failed"));
            });
            it("should raise error", function () { return __awaiter(void 0, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, expect(recordClient.getAllRecordsWithCursor(params)).rejects.toThrow("failed")];
                        case 1:
                            _a.sent();
                            expect(mockClient.getLogs()[3]).toStrictEqual({
                                path: "/k/v1/records/cursor.json",
                                method: "delete",
                                params: { id: CURSOR_ID }
                            });
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    });
    describe("addRecordComment", function () {
        var params = {
            app: APP_ID,
            record: RECORD_ID,
            comment: {
                text: "hello",
                mentions: [
                    {
                        code: "Administrator",
                        type: "USER"
                    }
                ]
            }
        };
        beforeEach(function () {
            recordClient.addRecordComment(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/record/comment.json");
        });
        it("should send a post request", function () {
            expect(mockClient.getLogs()[0].method).toBe("post");
        });
        it("should pass app, record and comment to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("deleteRecordComment", function () {
        var params = {
            app: APP_ID,
            record: RECORD_ID,
            comment: "1"
        };
        beforeEach(function () {
            recordClient.deleteRecordComment(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/record/comment.json");
        });
        it("should send a delete request", function () {
            expect(mockClient.getLogs()[0].method).toBe("delete");
        });
        it("should pass app, record and comment to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("getRecordComments", function () {
        var params = {
            app: APP_ID,
            record: RECORD_ID,
            order: "desc",
            offset: 5,
            limit: 5
        };
        beforeEach(function () {
            recordClient.getRecordComments(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/record/comments.json");
        });
        it("should send a get request", function () {
            expect(mockClient.getLogs()[0].method).toBe("get");
        });
        it("should pass app, record, order, offset and limit to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("updateRecordAssignees", function () {
        var params = {
            app: APP_ID,
            id: RECORD_ID,
            assignees: ["user1"],
            revision: 10
        };
        beforeEach(function () {
            recordClient.updateRecordAssignees(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/record/assignees.json");
        });
        it("should send a put request", function () {
            expect(mockClient.getLogs()[0].method).toBe("put");
        });
        it("should pass app, id, assignees, and revision to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("updateRecordStatus", function () {
        var params = {
            action: "Action1",
            app: APP_ID,
            assignee: "user1",
            id: RECORD_ID,
            revision: 10
        };
        beforeEach(function () {
            recordClient.updateRecordStatus(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/record/status.json");
        });
        it("should send a put request", function () {
            expect(mockClient.getLogs()[0].method).toBe("put");
        });
        it("should pass action, app, assignee, id, and revision to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("updateRecordsStatus", function () {
        var params = {
            app: APP_ID,
            records: [
                {
                    action: "Action1",
                    assignee: "user1",
                    id: RECORD_ID,
                    revision: 10
                }
            ]
        };
        beforeEach(function () {
            recordClient.updateRecordsStatus(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/records/status.json");
        });
        it("should send a put request", function () {
            expect(mockClient.getLogs()[0].method).toBe("put");
        });
        it("should pass app and records to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
});
describe("RecordClient with guestSpaceId", function () {
    it("should pass the path to the http client", function () {
        var APP_ID = 1;
        var RECORD_ID = 2;
        var GUEST_SPACE_ID = 3;
        var mockClient = new MockClient();
        var recordClient = new RecordClient(mockClient, GUEST_SPACE_ID);
        var params = { app: APP_ID, id: RECORD_ID };
        recordClient.getRecord(params);
        expect(mockClient.getLogs()[0].path).toBe("/k/guest/" + GUEST_SPACE_ID + "/v1/record.json");
    });
});
