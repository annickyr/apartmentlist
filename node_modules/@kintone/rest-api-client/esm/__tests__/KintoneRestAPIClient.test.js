import { KintoneRestAPIClient } from "../KintoneRestAPIClient";
import { Base64 } from "js-base64";
describe("KintoneRestAPIClient", function () {
    var originalKintone;
    var originalLocation;
    beforeEach(function () {
        originalKintone = global.kintone;
        originalLocation = Object.getOwnPropertyDescriptor(global, "location");
        Object.defineProperty(global, "location", {
            writable: true
        });
        global.kintone = {
            getRequestToken: function () { return "dummy request token"; }
        };
    });
    afterEach(function () {
        global.kintone = originalKintone;
        // Enable to update the location object to mock
        Object.defineProperty(global, "location", originalLocation);
    });
    describe("constructor", function () {
        describe("Header", function () {
            var baseUrl = "https://example.com";
            it("ApiToken auth", function () {
                var API_TOKEN = "ApiToken";
                var auth = {
                    apiToken: API_TOKEN
                };
                var client = new KintoneRestAPIClient({ baseUrl: baseUrl, auth: auth });
                expect(client.getHeaders()).toEqual({
                    "X-Cybozu-API-Token": API_TOKEN
                });
            });
            it("ApiToken auth using multiple tokens as comma-separated string", function () {
                var API_TOKEN1 = "ApiToken1";
                var API_TOKEN2 = "ApiToken2";
                var auth = {
                    apiToken: API_TOKEN1 + "," + API_TOKEN2
                };
                var client = new KintoneRestAPIClient({ baseUrl: baseUrl, auth: auth });
                expect(client.getHeaders()).toEqual({
                    "X-Cybozu-API-Token": API_TOKEN1 + "," + API_TOKEN2
                });
            });
            it("ApiToken auth using multiple tokens as array", function () {
                var API_TOKEN1 = "ApiToken1";
                var API_TOKEN2 = "ApiToken2";
                var auth = {
                    apiToken: [API_TOKEN1, API_TOKEN2]
                };
                var client = new KintoneRestAPIClient({ baseUrl: baseUrl, auth: auth });
                expect(client.getHeaders()).toEqual({
                    "X-Cybozu-API-Token": API_TOKEN1 + "," + API_TOKEN2
                });
            });
            it("Password  auth", function () {
                var USERNAME = "user";
                var PASSWORD = "password";
                var auth = {
                    username: USERNAME,
                    password: PASSWORD
                };
                var client = new KintoneRestAPIClient({ baseUrl: baseUrl, auth: auth });
                expect(client.getHeaders()).toEqual({
                    "X-Cybozu-Authorization": Base64.encode(USERNAME + ":" + PASSWORD)
                });
            });
            it("Session auth", function () {
                var auth = {};
                var client = new KintoneRestAPIClient({ baseUrl: baseUrl, auth: auth });
                expect(client.getHeaders()).toEqual({
                    "X-Requested-With": "XMLHttpRequest"
                });
            });
            it("Basic auth", function () {
                var basicAuth = { username: "user", password: "password" };
                var client = new KintoneRestAPIClient({ baseUrl: baseUrl, basicAuth: basicAuth });
                expect(client.getHeaders()).toEqual({
                    Authorization: "Basic " + Base64.encode("user:password"),
                    "X-Requested-With": "XMLHttpRequest"
                });
            });
            it("should use Session auth if auth param is not specified", function () {
                var client = new KintoneRestAPIClient({ baseUrl: baseUrl });
                expect(client.getHeaders()).toEqual({
                    "X-Requested-With": "XMLHttpRequest"
                });
            });
            it("should use location.origin in browser environment if baseUrl param is not specified", function () {
                global.location = {
                    origin: "https://example.com"
                };
                var client = new KintoneRestAPIClient();
                expect(client.getBaseUrl()).toBe("https://example.com");
            });
            it("should raise an error in Node environment if baseUrl param is not specified", function () {
                global.location = undefined;
                expect(function () { return new KintoneRestAPIClient(); }).toThrow("in Node environment, baseUrl is required");
            });
        });
    });
});
