import { AppID, RecordID, Revision } from "../KintoneTypes";
import { HttpClient } from "../http";
declare type ConditionalStrict<T, U, V extends object> = T extends U ? V : Partial<V>;
declare type ConditionalExist<T, U, V extends object> = T extends U ? V : {};
declare type Appearance = "response" | "parameter";
declare type Lang = "ja" | "en" | "zh" | "user" | "default";
declare type Properties = {
    [fieldCode: string]: object;
};
declare type Layout = object[];
declare type App = {
    appId: string;
    code: string;
    name: string;
    description: string;
    spaceId: string | null;
    threadId: string | null;
    createdAt: string;
    creator: {
        code: string;
        name: string;
    };
    modifiedAt: string;
    modifier: {
        code: string;
        name: string;
    };
};
declare type ViewBase<T extends Appearance> = {
    index: T extends "response" ? string : T extends "parameter" ? string | number : never;
} & ConditionalExist<T, "response", {
    builtinType?: "ASSIGNEE";
    id: string;
}> & ConditionalStrict<T, "response", {
    name: string;
    filterCond: string;
    sort: string;
}>;
declare type ListView<T extends Appearance> = ViewBase<T> & {
    type: "LIST";
} & ConditionalStrict<T, "response", {
    fields: string[];
}>;
declare type CalendarView<T extends Appearance> = ViewBase<T> & {
    type: "CALENDAR";
} & ConditionalStrict<T, "response", {
    date: string;
    title: string;
}>;
declare type CustomView<T extends Appearance> = ViewBase<T> & {
    type: "CUSTOM";
} & ConditionalStrict<T, "response", {
    html: string;
    pager: boolean;
    device: "DESKTOP" | "ANY";
}>;
declare type View<T extends Appearance> = ListView<T> | CalendarView<T> | CustomView<T>;
declare type AssigneeEntity<T extends Appearance> = {
    entity: {
        type: "USER" | "GROUP" | "ORGANIZATION" | "FIELD_ENTITY" | "CUSTOM_FIELD";
        code: string;
    } | ({
        type: "CREATOR";
    } & ConditionalExist<T, "response", {
        code: null;
    }>);
} & ConditionalStrict<T, "response", {
    includeSubs: boolean;
}>;
declare type State<T extends Appearance> = {
    index: T extends "response" ? string : T extends "parameter" ? string | number : never;
} & ConditionalStrict<T, "response", {
    name: string;
    assignee: {
        type: "ONE" | "ALL" | "ANY";
        entities: Array<AssigneeEntity<T>>;
    };
}>;
declare type Action<T extends Appearance> = {
    name: string;
    from: string;
    to: string;
} & ConditionalStrict<T, "response", {
    filterCond: string;
}>;
declare type DeployStatus = "PROCESSING" | "SUCCESS" | "FAIL" | "CANCEL";
declare type FieldRightEntity<T extends Appearance> = {
    accessibility: "READ" | "WRITE" | "NONE";
    entity: {
        code: string;
        type: "USER" | "GROUP" | "ORGANIZATION" | "FIELD_ENTITY";
    };
} & ConditionalStrict<T, "response", {
    includeSubs: boolean;
}>;
declare type FieldRight<T extends Appearance> = {
    code: string;
    entities: Array<FieldRightEntity<T>>;
};
declare type AppRightEntity<T extends Appearance> = {
    entity: {
        code: string;
        type: "USER" | "GROUP" | "ORGANIZATION";
    } | ({
        type: "CREATOR";
    } & ConditionalExist<T, "response", {
        code: null;
    }>);
} & ConditionalStrict<T, "response", {
    includeSubs: boolean;
    appEditable: boolean;
    recordViewable: boolean;
    recordAddable: boolean;
    recordEditable: boolean;
    recordDeletable: boolean;
    recordImportable: boolean;
    recordExportable: boolean;
}>;
declare type RecordRightEntity<T extends Appearance> = {
    entity: {
        code: string;
        type: "USER" | "GROUP" | "ORGANIZATION" | "FIELD_ENTITY";
    };
} & ConditionalStrict<T, "response", {
    viewable: boolean;
    editable: boolean;
    deletable: boolean;
    includeSubs: boolean;
}>;
declare type RecordRight<T extends Appearance> = {
    entities: Array<RecordRightEntity<T>>;
} & ConditionalStrict<T, "response", {
    filterCond: string;
}>;
declare type Rights = {
    id: string;
    record: {
        viewable: boolean;
        editable: boolean;
        deletable: boolean;
    };
    fields: object;
};
declare type AppCustomizeScope = "ALL" | "ADMIN" | "NONE";
declare type AppCustomizeResource<T extends Appearance> = {
    type: "URL";
    url: string;
} | {
    type: "FILE";
    file: {
        fileKey: string;
    } & ConditionalExist<T, "response", {
        name: string;
        contentType: string;
        size: string;
    }>;
};
declare type AppCustomize<T extends Appearance> = ConditionalStrict<T, "response", {
    js: Array<AppCustomizeResource<T>>;
    css: Array<AppCustomizeResource<T>>;
}>;
export declare class AppClient {
    private client;
    private guestSpaceId?;
    constructor(client: HttpClient, guestSpaceId?: number | string);
    getFormFields<T extends Properties>(params: {
        app: AppID;
        lang?: Lang;
        preview?: boolean;
    }): Promise<{
        properties: T;
        revision: string;
    }>;
    addFormFields(params: {
        app: AppID;
        properties: object;
        revision?: Revision;
    }): Promise<{
        revision: string;
    }>;
    updateFormFields(params: {
        app: AppID;
        properties: object;
        revision?: Revision;
    }): Promise<{
        revision: string;
    }>;
    deleteFormFields(params: {
        app: AppID;
        fields: string[];
        revision?: Revision;
    }): Promise<object>;
    getFormLayout<T extends Layout>(params: {
        app: AppID;
        preview?: boolean;
    }): Promise<{
        layout: T;
        revision: string;
    }>;
    updateFormLayout(params: {
        app: AppID;
        layout: object[];
        revision?: Revision;
    }): Promise<{
        revision: string;
    }>;
    getViews(params: {
        app: AppID;
        lang?: Lang;
        preview?: boolean;
    }): Promise<{
        views: {
            [viewName: string]: View<"response">;
        };
        revision: string;
    }>;
    updateViews(params: {
        app: AppID;
        views: {
            [viewName: string]: View<"parameter">;
        };
        revision?: Revision;
    }): Promise<{
        views: {
            [viewName: string]: {
                id: string;
            };
        };
        revision: string;
    }>;
    getApp(params: {
        id: AppID;
    }): Promise<App>;
    getApps(params: {
        ids?: AppID[] | null;
        codes?: string[] | null;
        name?: string | null;
        spaceIds?: Array<string | number> | null;
        limit?: string | number;
        offset?: string | number;
    }): Promise<{
        apps: App[];
    }>;
    addApp(params: {
        name: string;
        space?: string | number;
    }): Promise<{
        app: string;
        revision: string;
    }>;
    getAppSettings(params: {
        app: AppID;
        lang?: Lang;
        preview?: boolean;
    }): Promise<{
        name: string;
        description: string;
        icon: {
            type: "FILE";
            file: {
                contentType: string;
                fileKey: string;
                name: string;
                size: string;
            };
        } | {
            type: "PRESET";
            key: string;
        };
        theme: "WHITE" | "CLIPBOARD" | "BINDER" | "PENCIL" | "CLIPS" | "RED" | "BLUE" | "GREEN" | "YELLOW" | "BLACK";
        revision: string;
    }>;
    updateAppSettings(params: {
        app: AppID;
        name?: string;
        description?: string;
        icon?: {
            type: "FILE";
            file: {
                fileKey: string;
            };
        } | {
            type: "PRESET";
            key: string;
        };
        theme?: "WHITE" | "CLIPBOARD" | "BINDER" | "PENCIL" | "CLIPS" | "RED" | "BLUE" | "GREEN" | "YELLOW" | "BLACK";
        revision?: Revision;
    }): Promise<{
        revision: string;
    }>;
    getProcessManagement(params: {
        app: AppID;
        lang?: Lang;
        preview?: boolean;
    }): Promise<{
        enable: boolean;
        states: {
            [statusName: string]: State<"response">;
        };
        actions: Array<Action<"response">>;
        revision: string;
    }>;
    updateProcessManagement(params: {
        app: AppID;
        enable?: boolean;
        states?: {
            [statusName: string]: State<"parameter">;
        };
        actions?: Array<Action<"parameter">>;
        revision?: Revision;
    }): Promise<{
        revision: string;
    }>;
    getDeployStatus(params: {
        apps: AppID[];
    }): Promise<{
        apps: Array<{
            app: string;
            status: DeployStatus;
        }>;
    }>;
    deployApp(params: {
        apps: Array<{
            app: AppID;
            revision?: Revision;
        }>;
        revert?: boolean;
    }): Promise<{}>;
    getFieldAcl(params: {
        app: AppID;
        preview?: boolean;
    }): Promise<{
        rights: Array<FieldRight<"response">>;
        revision: string;
    }>;
    updateFieldAcl(params: {
        app: AppID;
        rights: Array<FieldRight<"parameter">>;
        revision?: Revision;
    }): Promise<{
        revision: string;
    }>;
    getAppAcl(params: {
        app: AppID;
        preview?: boolean;
    }): Promise<{
        rights: Array<AppRightEntity<"response">>;
        revision: string;
    }>;
    updateAppAcl(params: {
        app: AppID;
        rights: Array<AppRightEntity<"parameter">>;
        revision?: Revision;
    }): Promise<{
        revision: string;
    }>;
    evaluateRecordsAcl(params: {
        app: AppID;
        ids: RecordID[];
    }): Promise<{
        rights: Rights;
    }>;
    getRecordAcl(params: {
        app: AppID;
        lang?: Lang;
        preview?: boolean;
    }): Promise<{
        rights: Array<RecordRight<"response">>;
        revision: string;
    }>;
    updateRecordAcl(params: {
        app: AppID;
        rights: Array<RecordRight<"parameter">>;
        revision?: Revision;
    }): Promise<{
        revision: string;
    }>;
    getAppCustomize(params: {
        app: AppID;
        preview?: boolean;
    }): Promise<{
        scope: AppCustomizeScope;
        desktop: AppCustomize<"response">;
        mobile: AppCustomize<"response">;
        revision: string;
    }>;
    updateAppCustomize(params: {
        app: AppID;
        scope?: AppCustomizeScope;
        desktop?: AppCustomize<"parameter">;
        mobile?: AppCustomize<"parameter">;
        revision?: Revision;
    }): Promise<{
        revision: string;
    }>;
    private buildPathWithGuestSpaceId;
}
export {};
