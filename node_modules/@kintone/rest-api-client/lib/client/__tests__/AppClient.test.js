"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MockClient_1 = require("../../http/MockClient");
var AppClient_1 = require("../AppClient");
describe("AppClient", function () {
    var mockClient;
    var appClient;
    var APP_ID = 1;
    var REVISION = 5;
    var RECORD_ID = 3;
    var properties = {
        fieldCode: {
            type: "SINGLE_LINE_TEXT",
            code: "fieldCode",
            label: "Text Field"
        }
    };
    var layout = [
        {
            type: "ROW",
            fields: [
                {
                    type: "SINGLE_LINE_TEXT",
                    code: "fieldCode1",
                    size: { width: "100" }
                }
            ]
        },
        {
            type: "SUBTABLE",
            code: "tableFieldCode",
            fields: [
                {
                    type: "MULTI_LINE_TEXT",
                    code: "fieldCode2",
                    size: { width: "150", innerHeight: "200" }
                }
            ]
        }
    ];
    var views = {
        view1: {
            type: "LIST",
            index: 0,
            name: "view1",
            fields: ["field"],
            filterCond: 'field = "foo"',
            sort: "sortField desc"
        },
        view2: {
            type: "CALENDAR",
            index: 1,
            name: "view2",
            date: "dateField",
            title: "titleField",
            filterCond: 'field = "bar"',
            sort: "sortField asc"
        },
        view3: {
            type: "CUSTOM",
            index: 2,
            name: "view3",
            html: "<div>Hello!</div>",
            pager: true,
            device: "DESKTOP"
        }
    };
    var states = {
        status1: {
            name: "status1",
            index: 0,
            assignee: {
                type: "ONE",
                entities: [
                    { entity: { type: "FIELD_ENTITY", code: "creator" } }
                ]
            }
        },
        status2: {
            name: "status2",
            index: 1,
            assignee: {
                type: "ANY",
                entities: [{ entity: { type: "CREATOR" } }]
            }
        },
        status3: {
            name: "status3",
            index: 2,
            assignee: {
                type: "ALL",
                entities: [
                    { entity: { type: "USER", code: "user1" } },
                    { entity: { type: "USER", code: "user2" } }
                ]
            }
        }
    };
    var actions = [
        { name: "action1to2", from: "status1", to: "status2" },
        {
            name: "action2to3",
            from: "status2",
            to: "status3",
            filterCond: 'field = "foo"'
        }
    ];
    beforeEach(function () {
        mockClient = new MockClient_1.MockClient();
        appClient = new AppClient_1.AppClient(mockClient);
    });
    describe("getFormFields", function () {
        var lang = "default";
        var params = { app: APP_ID, lang: lang };
        describe("without preview", function () {
            beforeEach(function () {
                appClient.getFormFields(params);
            });
            it("should pass the path to the http client", function () {
                expect(mockClient.getLogs()[0].path).toBe("/k/v1/app/form/fields.json");
            });
            it("should send a get request", function () {
                expect(mockClient.getLogs()[0].method).toBe("get");
            });
            it("should pass app and lang as a param to the http client", function () {
                expect(mockClient.getLogs()[0].params).toEqual(params);
            });
        });
        describe("preview: true", function () {
            beforeEach(function () {
                appClient.getFormFields(__assign(__assign({}, params), { preview: true }));
            });
            it("should pass the path to the http client", function () {
                expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/app/form/fields.json");
            });
            it("should send a get request", function () {
                expect(mockClient.getLogs()[0].method).toBe("get");
            });
            it("should pass app and lang as a param to the http client", function () {
                expect(mockClient.getLogs()[0].params).toEqual(params);
            });
        });
    });
    describe("addFormFields", function () {
        var params = { app: APP_ID, properties: properties, revision: REVISION };
        beforeEach(function () {
            appClient.addFormFields(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/app/form/fields.json");
        });
        it("should send a post request", function () {
            expect(mockClient.getLogs()[0].method).toBe("post");
        });
        it("should pass app, properties and revision as a param to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("updateFormFields", function () {
        var params = { app: APP_ID, properties: properties, revision: REVISION };
        beforeEach(function () {
            appClient.updateFormFields(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/app/form/fields.json");
        });
        it("should send a put request", function () {
            expect(mockClient.getLogs()[0].method).toBe("put");
        });
        it("should pass app, properties and revision to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("deleteFormFields", function () {
        var fields = ["fieldCode1", "fieldCode2"];
        var params = { app: APP_ID, fields: fields, revision: REVISION };
        beforeEach(function () {
            appClient.deleteFormFields(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/app/form/fields.json");
        });
        it("should send a delete request", function () {
            expect(mockClient.getLogs()[0].method).toBe("delete");
        });
        it("should pass app, fields, and revision to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("getFormLayout", function () {
        var params = { app: APP_ID };
        describe("without preview", function () {
            beforeEach(function () {
                appClient.getFormLayout(params);
            });
            it("should pass the path to the http client", function () {
                expect(mockClient.getLogs()[0].path).toBe("/k/v1/app/form/layout.json");
            });
            it("should send a get request", function () {
                expect(mockClient.getLogs()[0].method).toBe("get");
            });
            it("should pass app as a param to the http client", function () {
                expect(mockClient.getLogs()[0].params).toEqual(params);
            });
        });
        describe("preview: true", function () {
            beforeEach(function () {
                appClient.getFormLayout(__assign(__assign({}, params), { preview: true }));
            });
            it("should pass the path to the http client", function () {
                expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/app/form/layout.json");
            });
            it("should send a get request", function () {
                expect(mockClient.getLogs()[0].method).toBe("get");
            });
            it("should pass app as a param to the http client", function () {
                expect(mockClient.getLogs()[0].params).toEqual(params);
            });
        });
    });
    describe("updateFormLayout", function () {
        var params = { app: APP_ID, layout: layout, revision: REVISION };
        beforeEach(function () {
            appClient.updateFormLayout(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/app/form/layout.json");
        });
        it("should send a put request", function () {
            expect(mockClient.getLogs()[0].method).toBe("put");
        });
        it("should pass app, layout and revision to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("getViews", function () {
        var lang = "default";
        var params = { app: APP_ID, lang: lang };
        describe("without preview", function () {
            beforeEach(function () {
                appClient.getViews(params);
            });
            it("should pass the path to the http client", function () {
                expect(mockClient.getLogs()[0].path).toBe("/k/v1/app/views.json");
            });
            it("should send a get request", function () {
                expect(mockClient.getLogs()[0].method).toBe("get");
            });
            it("should pass app and lang as a param to the http client", function () {
                expect(mockClient.getLogs()[0].params).toEqual(params);
            });
        });
        describe("preview: true", function () {
            beforeEach(function () {
                appClient.getViews(__assign(__assign({}, params), { preview: true }));
            });
            it("should pass the path to the http client", function () {
                expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/app/views.json");
            });
            it("should send a get request", function () {
                expect(mockClient.getLogs()[0].method).toBe("get");
            });
            it("should pass app and lang as a param to the http client", function () {
                expect(mockClient.getLogs()[0].params).toEqual(params);
            });
        });
    });
    describe("updateViews", function () {
        var params = { app: APP_ID, views: views, revision: REVISION };
        beforeEach(function () {
            appClient.updateViews(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/app/views.json");
        });
        it("should send a put request", function () {
            expect(mockClient.getLogs()[0].method).toBe("put");
        });
        it("should pass app, views and revision to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("getApp", function () {
        var params = {
            id: APP_ID
        };
        beforeEach(function () {
            appClient.getApp(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/app.json");
        });
        it("should send a get request", function () {
            expect(mockClient.getLogs()[0].method).toBe("get");
        });
        it("should pass id as a param to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("getApps", function () {
        var params = {
            ids: [APP_ID],
            codes: ["APP"],
            name: "app",
            spaceIds: [1, 2],
            limit: 100,
            offset: 30
        };
        beforeEach(function () {
            appClient.getApps(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/apps.json");
        });
        it("should send a get request", function () {
            expect(mockClient.getLogs()[0].method).toBe("get");
        });
        it("should pass ids, codes, name, spaceIds, limit, and offset as a param to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("addApp", function () {
        describe("without space", function () {
            var params = {
                name: "app"
            };
            beforeEach(function () {
                appClient.addApp(params);
            });
            it("should pass the path to the http client", function () {
                expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/app.json");
            });
            it("should send a post request", function () {
                expect(mockClient.getLogs()[0].method).toBe("post");
            });
            it("should pass name, space, and thread as a param to the http client", function () {
                expect(mockClient.getLogs()[0].params).toEqual(params);
            });
        });
        describe("with space", function () {
            var params = {
                name: "app",
                space: 10
            };
            var defaultThread = 20;
            beforeEach(function () {
                mockClient.mockResponse({ defaultThread: defaultThread });
                appClient.addApp(params);
            });
            it("should fetch the default thread of the space", function () {
                expect(mockClient.getLogs()[0].path).toBe("/k/v1/space.json");
                expect(mockClient.getLogs()[0].method).toBe("get");
                expect(mockClient.getLogs()[0].params).toEqual({ id: params.space });
            });
            it("should add new app into the default thread", function () {
                expect(mockClient.getLogs()[1].path).toBe("/k/v1/preview/app.json");
                expect(mockClient.getLogs()[1].method).toBe("post");
                expect(mockClient.getLogs()[1].params).toEqual(__assign(__assign({}, params), { thread: defaultThread }));
            });
        });
    });
    describe("getProcessManagement", function () {
        var lang = "default";
        var params = { app: APP_ID, lang: lang };
        describe("without preview", function () {
            beforeEach(function () {
                appClient.getProcessManagement(params);
            });
            it("should pass the path to the http client", function () {
                expect(mockClient.getLogs()[0].path).toBe("/k/v1/app/status.json");
            });
            it("should send a get request", function () {
                expect(mockClient.getLogs()[0].method).toBe("get");
            });
            it("should pass app and lang to the http client", function () {
                expect(mockClient.getLogs()[0].params).toEqual(params);
            });
        });
        describe("preview: true", function () {
            beforeEach(function () {
                appClient.getProcessManagement(__assign(__assign({}, params), { preview: true }));
            });
            it("should pass the path to the http client", function () {
                expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/app/status.json");
            });
            it("should send a get request", function () {
                expect(mockClient.getLogs()[0].method).toBe("get");
            });
            it("should pass app and lang to the http client", function () {
                expect(mockClient.getLogs()[0].params).toEqual(params);
            });
        });
    });
    describe("updateProcessManagement", function () {
        var params = {
            app: APP_ID,
            revision: REVISION,
            enable: true,
            states: states,
            actions: actions
        };
        beforeEach(function () {
            appClient.updateProcessManagement(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/app/status.json");
        });
        it("should send a put request", function () {
            expect(mockClient.getLogs()[0].method).toBe("put");
        });
        it("should pass app, states, actions and revision to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("getAppSettings", function () {
        var lang = "default";
        var params = { app: APP_ID, lang: lang };
        describe("without preview", function () {
            beforeEach(function () {
                appClient.getAppSettings(params);
            });
            it("should pass the path to the http client", function () {
                expect(mockClient.getLogs()[0].path).toBe("/k/v1/app/settings.json");
            });
            it("should send a get request", function () {
                expect(mockClient.getLogs()[0].method).toBe("get");
            });
            it("should pass app and lang to the http client", function () {
                expect(mockClient.getLogs()[0].params).toEqual(params);
            });
        });
        describe("preview: true", function () {
            beforeEach(function () {
                appClient.getAppSettings(__assign(__assign({}, params), { preview: true }));
            });
            it("should pass the path to the http client", function () {
                expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/app/settings.json");
            });
            it("should send a get request", function () {
                expect(mockClient.getLogs()[0].method).toBe("get");
            });
            it("should pass app and lang to the http client", function () {
                expect(mockClient.getLogs()[0].params).toEqual(params);
            });
        });
    });
    describe("updateAppSettings", function () {
        var params = {
            app: APP_ID,
            revision: REVISION,
            name: "test app",
            description: "<div>Description</div>",
            icon: {
                type: "FILE",
                file: {
                    fileKey: "file key"
                }
            },
            theme: "WHITE"
        };
        beforeEach(function () {
            appClient.updateAppSettings(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/app/settings.json");
        });
        it("should send a put request", function () {
            expect(mockClient.getLogs()[0].method).toBe("put");
        });
        it("should pass app, name, description, icon, theme and revision to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("getDeployStatus", function () {
        var params = {
            apps: [APP_ID]
        };
        beforeEach(function () {
            appClient.getDeployStatus(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/app/deploy.json");
        });
        it("should send a get request", function () {
            expect(mockClient.getLogs()[0].method).toBe("get");
        });
        it("should pass apps as a param to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("deployApp", function () {
        var params = {
            apps: [{ app: APP_ID, revision: REVISION }],
            revert: true
        };
        beforeEach(function () {
            appClient.deployApp(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/app/deploy.json");
        });
        it("should send a post request", function () {
            expect(mockClient.getLogs()[0].method).toBe("post");
        });
        it("should pass apps and revert as a param to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("getFieldAcl", function () {
        var params = {
            app: APP_ID
        };
        beforeEach(function () {
            appClient.getFieldAcl(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/field/acl.json");
        });
        it("should send a get request", function () {
            expect(mockClient.getLogs()[0].method).toBe("get");
        });
        it("should pass app as a param to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("updateFieldAcl", function () {
        var params = {
            app: APP_ID,
            rights: [
                {
                    code: "foo",
                    entities: [
                        {
                            accessibility: "READ",
                            entity: {
                                code: "bar",
                                type: "USER"
                            }
                        }
                    ]
                }
            ]
        };
        beforeEach(function () {
            appClient.updateFieldAcl(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/field/acl.json");
        });
        it("should send a put request", function () {
            expect(mockClient.getLogs()[0].method).toBe("put");
        });
        it("should pass app and rights as a param to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("getRecordAcl", function () {
        var lang = "default";
        var params = {
            app: APP_ID,
            lang: lang
        };
        describe("without preview", function () {
            beforeEach(function () {
                appClient.getRecordAcl(params);
            });
            it("should pass the path to the http client", function () {
                expect(mockClient.getLogs()[0].path).toBe("/k/v1/record/acl.json");
            });
            it("should send a get request", function () {
                expect(mockClient.getLogs()[0].method).toBe("get");
            });
            it("should pass app and lang as a param to the http client", function () {
                expect(mockClient.getLogs()[0].params).toEqual(params);
            });
        });
        describe("preview: true", function () {
            beforeEach(function () {
                appClient.getRecordAcl(__assign(__assign({}, params), { preview: true }));
            });
            it("should pass the path to the http client", function () {
                expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/record/acl.json");
            });
            it("should send a get request", function () {
                expect(mockClient.getLogs()[0].method).toBe("get");
            });
            it("should pass app and lang as a param to the http client", function () {
                expect(mockClient.getLogs()[0].params).toEqual(params);
            });
        });
    });
    describe("updateRecordAcl", function () {
        var params = {
            app: APP_ID,
            rights: [
                {
                    filterCond: 'field = "foo"',
                    entities: [
                        {
                            entity: {
                                code: "bar",
                                type: "USER"
                            },
                            viewable: false,
                            editable: false,
                            deletable: false,
                            includeSubs: true
                        }
                    ]
                }
            ],
            revision: REVISION
        };
        beforeEach(function () {
            appClient.updateRecordAcl(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/record/acl.json");
        });
        it("should send a put request", function () {
            expect(mockClient.getLogs()[0].method).toBe("put");
        });
        it("should pass app, right and revision as a param to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("getAppAcl", function () {
        var params = {
            app: APP_ID
        };
        describe("without preview", function () {
            beforeEach(function () {
                appClient.getAppAcl(params);
            });
            it("should pass the path to the http client", function () {
                expect(mockClient.getLogs()[0].path).toBe("/k/v1/app/acl.json");
            });
            it("should send a get request", function () {
                expect(mockClient.getLogs()[0].method).toBe("get");
            });
            it("should pass app as a param to the http client", function () {
                expect(mockClient.getLogs()[0].params).toEqual(params);
            });
        });
        describe("preview: true", function () {
            beforeEach(function () {
                appClient.getAppAcl(__assign(__assign({}, params), { preview: true }));
            });
            it("should pass the path to the http client", function () {
                expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/app/acl.json");
            });
            it("should send a get request", function () {
                expect(mockClient.getLogs()[0].method).toBe("get");
            });
            it("should pass app and preview as a param to the http client", function () {
                expect(mockClient.getLogs()[0].params).toEqual(params);
            });
        });
    });
    describe("updateAppAcl", function () {
        var params = {
            app: APP_ID,
            rights: [
                {
                    entity: {
                        type: "USER",
                        code: "foo"
                    },
                    appEditable: true,
                    recordViewable: true,
                    recordAddable: true,
                    recordEditable: true,
                    recordDeletable: true,
                    recordImportable: true,
                    recordExportable: true
                }
            ]
        };
        beforeEach(function () {
            appClient.updateAppAcl(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/app/acl.json");
        });
        it("should send a put request", function () {
            expect(mockClient.getLogs()[0].method).toBe("put");
        });
        it("should pass app and rights as a param to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("evaluateRecordsAcl", function () {
        var params = {
            app: APP_ID,
            ids: [RECORD_ID]
        };
        beforeEach(function () {
            appClient.evaluateRecordsAcl(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/records/acl/evaluate.json");
        });
        it("should send a get request", function () {
            expect(mockClient.getLogs()[0].method).toBe("get");
        });
        it("should pass app and ids as a param to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
    describe("getAppCustomize", function () {
        var params = { app: APP_ID };
        describe("without preview", function () {
            beforeEach(function () {
                appClient.getAppCustomize(params);
            });
            it("should pass the path to the http client", function () {
                expect(mockClient.getLogs()[0].path).toBe("/k/v1/app/customize.json");
            });
            it("should send a get request", function () {
                expect(mockClient.getLogs()[0].method).toBe("get");
            });
            it("should pass app as a param to the http client", function () {
                expect(mockClient.getLogs()[0].params).toEqual(params);
            });
        });
        describe("preview: true", function () {
            beforeEach(function () {
                appClient.getAppCustomize(__assign(__assign({}, params), { preview: true }));
            });
            it("should pass the path to the http client", function () {
                expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/app/customize.json");
            });
            it("should send a get request", function () {
                expect(mockClient.getLogs()[0].method).toBe("get");
            });
            it("should pass app and preview as a param to the http client", function () {
                expect(mockClient.getLogs()[0].params).toEqual(params);
            });
        });
    });
    describe("updateAppCustomize", function () {
        var resource = {
            js: [
                {
                    type: "URL",
                    url: "https://www.example.com/example-mobile.js"
                }
            ],
            css: [
                {
                    type: "FILE",
                    file: {
                        fileKey: "ddfc8e89-7aa3-4350-b9ab-3a75c9cf46b3"
                    }
                }
            ]
        };
        var params = {
            app: APP_ID,
            scope: "ALL",
            desktop: resource,
            mobile: resource,
            revision: REVISION
        };
        describe("customize resources are specified", function () {
            beforeEach(function () {
                appClient.updateAppCustomize(params);
            });
            it("should pass the path to the http client", function () {
                expect(mockClient.getLogs()[0].path).toBe("/k/v1/preview/app/customize.json");
            });
            it("should send a put request", function () {
                expect(mockClient.getLogs()[0].method).toBe("put");
            });
            it("should pass app, scope, desktop, mobile and revision as a param to the http client", function () {
                expect(mockClient.getLogs()[0].params).toEqual(params);
            });
        });
    });
});
describe("AppClient with guestSpaceId", function () {
    it("should pass the path to the http client", function () {
        var APP_ID = 1;
        var GUEST_SPACE_ID = 2;
        var lang = "default";
        var params = { app: APP_ID, lang: lang };
        var mockClient = new MockClient_1.MockClient();
        var appClient = new AppClient_1.AppClient(mockClient, GUEST_SPACE_ID);
        appClient.getFormFields(params);
        expect(mockClient.getLogs()[0].path).toBe("/k/guest/" + GUEST_SPACE_ID + "/v1/app/form/fields.json");
    });
});
