"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var MockClient_1 = require("../../http/MockClient");
var FileClient_1 = require("../FileClient");
var form_data_1 = __importDefault(require("form-data"));
jest.mock("form-data");
describe("FileClient", function () {
    var mockClient;
    var fileClient;
    beforeEach(function () {
        mockClient = new MockClient_1.MockClient();
        fileClient = new FileClient_1.FileClient(mockClient);
    });
    describe("uploadFile", function () {
        var params = {
            file: {
                name: "text.text",
                data: "Hello!"
            }
        };
        beforeEach(function () {
            fileClient.uploadFile(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/file.json");
        });
        it("should send a post request", function () {
            expect(mockClient.getLogs()[0].method).toBe("post");
        });
        it("should pass file object includes name and data as a param to the http client", function () {
            var MockFormData = form_data_1.default;
            expect(MockFormData.prototype.append.mock.calls[0]).toEqual([
                "file",
                params.file.data,
                params.file.name
            ]);
        });
    });
    describe("downloadFile", function () {
        var params = { fileKey: "some_file_key" };
        beforeEach(function () {
            fileClient.downloadFile(params);
        });
        it("should pass the path to the http client", function () {
            expect(mockClient.getLogs()[0].path).toBe("/k/v1/file.json");
        });
        it("should send a get request", function () {
            expect(mockClient.getLogs()[0].method).toBe("get");
        });
        it("should pass fileKey as a param to the http client", function () {
            expect(mockClient.getLogs()[0].params).toEqual(params);
        });
    });
});
describe("FileClient with guestSpaceId", function () {
    var GUEST_SPACE_ID = 1;
    var params = {
        file: {
            name: "text.text",
            data: "Hello!"
        }
    };
    var mockClient = new MockClient_1.MockClient();
    var fileClient = new FileClient_1.FileClient(mockClient, GUEST_SPACE_ID);
    fileClient.uploadFile(params);
    it("should pass the path to the http client", function () {
        expect(mockClient.getLogs()[0].path).toBe("/k/guest/" + GUEST_SPACE_ID + "/v1/file.json");
    });
});
